#+Title: Ansible-server 
#+Author: Systems Team
#+SETUPFILE: ../org-templates/level-1.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  This document contains the network configuration of ansible machine and configuring other containers from a user in ansible machine  
* Implementation
**  Ansible-server node configuration
*** Ansible 
    This script configures the network on ansible machine
**** Create ansible/config-server container
     - Creates a password for ansible container and also replaces some
       of the network configuration files of ansible
#+BEGIN_SRC yml :tangle roles/ansible/tasks/main.yml
---
# tasks file for ansible
- name: Setting root password for ansible
  shell: vzctl set 1002 --userpasswd root:{{container_root_password}}

- name: copying interface ifcfg-eth0 file
  template: src=ifcfg-eth0 dest=/vz/private/1002/etc/sysconfig/network-scripts/

- name: copying interface ifcfg-eth1 file
  template: src=ifcfg-eth1 dest=/vz/private/1002/etc/sysconfig/network-scripts/

- name: Config-server Network restarting
  command: vzctl exec 1002 service network restart
#+END_SRC

**** Configure Ansible's Public Network
     This template contains the valid ip-address,gateway,dns that are
     required for the container network configuration. These are
     imported from the values given in [[./common-vars.org][common-vars]] role
#+BEGIN_SRC yml :tangle roles/ansible/templates/ifcfg-eth0
DEVICE=eth0
TYPE=Ethernet
BOOTPROTO=static
ONBOOT=yes
NM_CONTROLLED=no
IPADDR={{ipaddress.config_server}}
NETMASK={{net_mask}}
GATEWAY={{internet_gateway}}
DNS1={{dnsaddress.dns1}}
DNS2={{dnsaddress.dns2}}

#+END_SRC

**** Configure Ansible's Private Network
     This template contains the private ip and net-mask of the
     container
#+begin_src yml :tangle roles/ansible/templates/ifcfg-eth1
DEVICE=eth1
BOOTPROTO=static
ONBOOT=yes
NM_CONTROLLED=no
IPADDR=10.100.1.2
NETMASK={{net_mask}}

#+end_src

**** dependencies
     Variable dependencies are mentioned here.
#+begin_src yml :tangle roles/ansible/meta/main.yml
dependencies:
    - common-vars

#+end_src
      `
*** config-server
     This script installs all the required packages, creates a user
     (vlead) inside the ansible container and changes some permissions
     and clone system-model inside vlead user.Generates ssh-keys

**** Install epel-release
#+BEGIN_SRC yml :tangle roles/config-server/tasks/main.yml
---
 - name: installing epel-release package
   yum: name=epel-release state=latest
   environment: "{{proxy_env}}"
#+END_SRC
**** Install ansible( configuration management tool)
     #+BEGIN_SRC yml :tangle roles/config-server/tasks/main.yml
 - name: installing ansible, git and emacs
   yum: name="{{item}}" state=latest
   environment: "{{proxy_env}}"
   with_items:
        - ansible
        - git
        - emacs

     #+END_SRC
**** Create vlead user on ansible container and generates ssh-keys for vlead user
     #+BEGIN_SRC yml :tangle roles/config-server/tasks/main.yml
 - name: Creating vlead user and generating ssh-keys for vlead
   user: name=vlead password={{vlead_user_password}} generate_ssh_key=yes groups=wheel
     #+END_SRC
**** Add vlead user to sudoers list
     #+BEGIN_SRC yml :tangle roles/config-server/tasks/main.yml
 - name: Adding vlead user to sudoers file
   lineinfile: 
       path: /etc/sudoers 
       regexp: '^%wheel.*NOPASSWD: ALL.*'  
       line: '%wheel        ALL=(ALL)       NOPASSWD: ALL' 
       state: present
     
     #+END_SRC
**** Configure Host machine's ssh_config and sshd_config 
     #+BEGIN_SRC yml :tangle roles/config-server/tasks/main.yml
 - name: Setting StrictHostkeyChecking of ansible to no
   lineinfile: path=/etc/ssh/ssh_config regexp="^Strict.*" line="StrictHostKeyChecking no" state=present
   notify: restart_ssh
 - name: Setting PermitRootLogin of ansible to yes
   lineinfile: path=/etc/ssh/sshd_config regexp="^PermitRoot.*" line="PermitRootLogin yes" state=present
   notify: restart_ssh

 - name: Setting Password Authentication of ansible to yes
   lineinfile: path=/etc/ssh/sshd_config regexp="^PasswordAuthentication.*" line="PasswordAuthentication yes" state=present
   notify: restart_ssh

     #+END_SRC
**** Copy systems model from host machine to config-server
     #+BEGIN_SRC yml :tangle roles/config-server/tasks/main.yml
 - name: Copying system-model repo from host-machine to ansible/config-server container 
   synchronize: src="{{systems_model_dest}}" dest=/home/vlead/ 

 - name: Updating ownership permissions to systems-model repo
   file: path=/home/vlead/systems-model recurse=true owner=vlead group=vlead 
     
     #+END_SRC

**** Dependencies
       Dependencies are required when accessing variables from other
      roles.

#+BEGIN_SRC yml :tangle roles/config-server/meta/main.yml
dependencies:
   - common-vars

#+END_SRC   

**** Handlers
handlers come into play when there any notify field in a particular playbook
#+BEGIN_SRC yml :tangle roles/config-server/handlers/main.yml
---
- name: restart_ssh
  service: name=sshd state=restarted

#+END_SRC

*** Config-with-vlead-user
    Configures all other containers from ansible machine through vlead
    user.
**** Installing sshpass 
This script installs sshpass package for copying sshkeys  into other containers

#+BEGIN_SRC yml :tangle roles/config-with-vlead-user/tasks/main.yml 

---
 #tasks file for config-with-vlead-user
- name: Installing sshpass
  yum: name=sshpass state=installed
  environment: "{{proxy_env}}"

#+END_SRC

**** Include other files to main.yml
     Description of the included files in the following file
     can be found below. 
#+BEGIN_SRC yml :tangle roles/config-with-vlead-user/tasks/main.yml
- include: copy-sshkeys.yml
- include: setupemacs.yml
- include: changes_in_makefile.yml
- include: changes-in-sys-common-vars.yml
#+END_SRC

**** Run make in systems-model and make some changes in the common_vars
     This script describes 
     - Run make in systems-model repository
     - Keeping a backup file after running make
     - Check the playbooks/scripts for syntax errors
     - Update proxy-port in systems-model
#+BEGIN_SRC yml :tangle roles/config-with-vlead-user/tasks/changes-in-sys-common-vars.yml

- name: changing directory to systems-model and running make
  command: make
  register: out
  args: 
    chdir: ~/systems-model/
- debug: var=out.stdout_lines
- name: Copying build file --Backup 
  command: sudo cp -r build/"{{clustername}}" /root/
  register: out
  args:
   chdir: ~/systems-model/
- debug: var=out.stdout_lines
- name: Changing proxy-port of system-model
  lineinfile:
     path: ~/systems-model/build/{{clustername}}/roles/common_vars/vars/main.yml 
     regexp: '^proxy_port:.*'
     line: 'proxy_port: {{proxy_port}}'
     state: present
- name: Backup Systems-model common_vars/vars/main.yml file 
  command: cp main.yml backup.yml
  args:
   chdir: systems-model/build/{{clustername}}/roles/common_vars/vars
- name: Comment out none in common_vars/vars/main.yml file
  lineinfile: 
     path: systems-model/build/{{clustername}}/roles/common_vars/vars/main.yml
     regexp: "none: none"
     line: " #none: none"
 
- name: Set http_proxy
  lineinfile:
     path: systems-model/build/{{clustername}}/roles/common_vars/vars/main.yml
     regexp: "http_proxy:*"
     line: " http_proxy: {{proxy_env.http_proxy}}"

- name: Set https_proxy
  lineinfile:
     path: systems-model/build/{{clustername}}/roles/common_vars/vars/main.yml
     regexp: "https_proxy:*"
     line: " https_proxy: {{proxy_env.https_proxy}}"

- name: Update Hostmachine_ip common_vars/vars/main.yml
  lineinfile:
     path: systems-model/build/{{clustername}}/roles/common_vars/vars/main.yml
     regexp: "hostmachine_ip:*"
     line: "hostmachine_ip: {{hostmachine_ip}}"
     state: present
  when: virtualization == "OpenVZ"

- name: Update hostmachine_password variable in common_vars/vars/main.yml
  lineinfile:
     path: systems-model/build/{{clustername}}/roles/common_vars/vars/main.yml
     regexp: "hostmachine_password:*"
     line: "hostmachine_password: {{hostmachine_password}}"
     state: present
  when: virtualization == "OpenVZ"


#+END_SRC

**** Including yml files
     Description of these yml files will be explained below.
#+BEGIN_SRC yml :tangle roles/config-with-vlead-user/tasks/main.yml
- include: set-proxy.yml
#- include: ads.yml
- include: knownhost.yml
- include: cluster_site.yml
- include: site_run.yml
- include: site_run2.yml
#+END_SRC

**** Copy-sshkeys of ansible/config-server to all cluster containers
     Copies ssh-key of ansible machine to all cluster
     containers including ansible/config-server.Enabling ssh
     access from ansible using key-based authentication
#+BEGIN_SRC yml :tangle roles/config-with-vlead-user/tasks/copy-sshkeys.yml
---
 - name: Copying ssh keys of ansible to localhost
   shell: sshpass -p "{{container_root_password}}" ssh-copy-id root@localhost
   register: out
 - debug: var=out.stdout_lines

 - name: Copying ssh keys of ansible to 127.0.0.1
   shell: sshpass -p "{{container_root_password}}" ssh-copy-id root@127.0.0.1
   register: out
 - debug: var=out.stdout_lines

 - name: Copying ssh keys of ansible to router
   shell: sshpass -p "{{container_root_password}}" ssh-copy-id root@10.100.1.1
   register: out
 - debug: var=out.stdout_lines

 - name: Copying ssh keys of ansible to ansible
   shell: sshpass -p "{{container_root_password}}" ssh-copy-id root@10.100.1.2
   register: out
 - debug: var=out.stdout_lines
 
 - name: Copying  ssh keys of ansible to ossec-server
   shell: sshpass -p "{{container_root_password}}" ssh-copy-id root@10.100.1.3
   register: out
 - debug: var=out.stdout_lines
 
 - name: Copying ssh keys of ansible to rsyslog-server
   shell: sshpass -p "{{container_root_password}}" ssh-copy-id root@10.100.1.4
   register: out
 - debug: var=out.stdout_lines

 - name: Copying ssh keys of ansible to private-dns-server
   shell: sshpass -p "{{container_root_password}}" ssh-copy-id root@10.100.1.5
   register: out
 - debug: var=out.stdout_lines
 
 - name: Copying ssh keys of ansible to public-dns-server
   shell: sshpass -p "{{container_root_password}}" ssh-copy-id root@10.100.1.6
   register: out
 - debug: var=out.stdout_lines

 - name: Copying ssh keys of ansible to reverse-proxy-server
   shell: sshpass -p "{{container_root_password}}" ssh-copy-id root@10.100.1.7
   register: out
 - debug: var=out.stdout_lines

 - name: Copying ssh keys of ansible to nagios-server
   shell: sshpass -p "{{container_root_password}}" ssh-copy-id root@10.100.1.8
   register: out
 - debug: var=out.stdout_lines

 - name: Copying ssh keys of ansible to ads-server
   shell: sshpass -p "{{container_root_password}}" ssh-copy-id root@10.100.1.9
   register: out
 - debug: var=out.stdout_lines

 - name: Copying ssh keys of ansible to rsnapshot-server
   shell: sshpass -p "{{container_root_password}}" ssh-copy-id root@10.100.1.10
   register: out
 - debug: var=out.stdout_lines

#+END_SRC

**** Set emacs and org-mode version
This script downloads emacs- org-mode
#+BEGIN_SRC yml :tangle roles/config-with-vlead-user/tasks/setupemacs.yml
---
- name: Downloading Emacs
  file: path=emacs/lisp mode=0755 state=directory

- name: un-taring  downloaded file
  unarchive: src={{org_link}} dest=/home/vlead/emacs/lisp/ remote_src=True
  environment: "{{proxy_env}}"

#+END_SRC

**** Modify makefile
     Replaces some texts in system-model makefile according to our configuration before running make
#+BEGIN_SRC yml :tangle roles/config-with-vlead-user/tasks/changes_in_makefile.yml
---

- name: Replacing router-ip in makefile of systems-model  
  replace:
      path: systems-model/makefile
      regexp: "ROUTER_IP=10.4.14.207"
      replace: "ROUTER_IP={{ipaddress.router}}"

- name: Replacing config-server ip in makefile of system-model
  replace:
      path: systems-model/makefile
      regexp: "CONFIG_SERVER=10.4.14.208"
      replace: "CONFIG_SERVER={{ipaddress.config_server}}"

- name: Replacing clustername in makefile of system-model
  replace:
      path: systems-model/makefile
      regexp: "CLUSTER=cluster"
      replace: "CLUSTER={{clustername}}"


- name: Replacing Smtp_smart_host in makefile of systems-model
  replace:
      path: systems-model/makefile
      regexp: "SMTP_SMART_HOST= smtp.admin.iiit.ac.in"
      replace: "SMTP_SMART_HOST={{smtp_smart_host}}"

 

#+END_SRC
**** Set Proxy
     This script copies set-proxy.yml file from templates to
     destination mentioned below and then runs playbook which sets up
     proxy in all other containers
#+BEGIN_SRC yml :tangle roles/config-with-vlead-user/tasks/set-proxy.yml

- name: Copying set-proxy template to ansible container
  template: src=set-proxy.yml dest=systems-model/build/{{clustername}}/

- name: Running  set-proxy.yml file to set proxy in all other containers
  command: ansible-playbook -i hosts set-proxy.yml
  register: out
  args: 
    chdir: systems-model/build/{{clustername}}/
- debug: var=out.stdout_lines
#+END_SRC

**** Backup common-vars/vars/main.yml
     Creates backup for main.yml file of common-vars in
     system-model. Also changes private-dns
#+begin_src yml :tangle roles/config-with-vlead-user/tasks/cluster_site.yml
---
 - name: Backup common_vars/vars/main.yml
   shell: 'cp main.yml backup-main-$(date +%d-%b-%Y).yml'
   args:
     chdir: systems-model/build/{{clustername}}/roles/common_vars/vars/ 
#+end_src

**** Syntax check systems-model configure_servers.yaml and run configure_servers.yaml
     This script runs =configure_servers.yaml= file in vlead user on ansible
     machine
#+begin_src yml :tangle roles/config-with-vlead-user/tasks/site_run.yml

- name: Syntax checking configure_servers.yml
  command: ansible-playbook -i hosts --list-tasks --syntax-check configure_servers.yaml
  register: out
  args:
     chdir: systems-model/build/{{clustername}}/
- debug: var=out.stdout_lines

#this step needs to be changed and done parallel

- name: Configuring all server nodes. This may take a few minutes( 15 to 20 minutes)
  shell: ansible-playbook -i hosts configure_servers.yaml && sudo iptables -I INPUT 12 -m state --state NEW -s {{hostmachine_ip}}/32 -p tcp -m tcp --dport 22 -j ACCEPT
  register: out
  args:
     chdir: systems-model/build/{{clustername}}/
- debug: var=out.stdout_lines

- name: Installing clients ossec-client,rsyslog-client,nagios... in all server nodes. ( May take 10 to 15 Minutes)
  shell: ansible-playbook -i hosts install_clients_in_servers.yaml
  register: out
  args:
     chdir: systems-model/build/{{clustername}}/
- debug: var=out.stdout_lines


#+end_src
**** Update cluster DNS ips in common-vars
     Changes private-dns-ips and private-dns-zone in
     common-vars of systems-model
#+BEGIN_SRC yml :tangle roles/config-with-vlead-user/tasks/site_run2.yml
---
 - name: Updating private-dns-ips
   replace:
        path: systems-model/build/{{clustername}}/roles/common_vars/vars/main.yml       
        regexp: 'private_dns_ips: none'
        replace: 'private_dns_ips: \n    - 10.100.1.5'
       
 - name: Updating private-dns-zone
   replace:
        path: systems-model/build/{{clustername}}/roles/common_vars/vars/main.yml       
        regexp: 'private_dns_zone: none'
        replace: 'private_dns_zone: "{{clustername}}.virtual-labs.ac.in {{clustername}}.vlabs.ac.in"'


 - name: Syntax checking configure_servers.yml
   command: ansible-playbook -i hosts --list-tasks --syntax-check configure_servers.yaml
   register: out
   args:
      chdir: systems-model/build/{{clustername}}/
 - debug: var=out.stdout_lines

 - name: Configuring all server nodes to set cluster dns ip in all server nodes
   command: ansible-playbook -i hosts  configure_servers.yaml
   register: out
   args:
      chdir: systems-model/build/{{clustername}}/
 - debug: var=out.stdout_lines
 
#+END_SRC
**** Handlers
 Comes into play when there is any notify field mentioned in tasks of this role
#+BEGIN_SRC yml :tangle roles/config-with-vlead-user/handlers/main.yml
---
# handlers file for config-with-vlead-user
- name: restart_ssh
  service: name=sshd state=restarted

#+END_SRC

**** Dependencies
     Each role in the cluster-automation project depends on
     [[./common-vars.org][common-vars role]]. All variables are defined the
     common-vars roles. variable values of each role will
     come from the common-vars

#+BEGIN_SRC yml :tangle roles/config-with-vlead-user/meta/main.yml

dependencies:
   - common-vars

#+END_SRC

**** Set network proxy in server containers
     Template for setting-up proxy in all containers.  This
     template will be copied into the cluser's ansible
     container. From cluster's ansible container, this
     playbook will run.This sets proxy in all other
     containers
#+BEGIN_SRC yml :tangle roles/config-with-vlead-user/templates/set-proxy.yml
---
- hosts: router
  remote_user: root

  tasks: 
  - name: Delete proxy if there is any
    lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="" state=present
  - name: set proxy
    lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="proxy={{proxy_env.http_proxy}}" state=present

- hosts: private_dns
  remote_user: root

  tasks: 
  - name: Delete proxy if there is any
    lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="" state=present
  - name: set proxy
    lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="proxy={{proxy_env.http_proxy}}" state=present


- hosts: public_dns
  remote_user: root

  tasks: 
   - name: Delete proxy if there is any
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="" state=present
   - name: set proxy
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="proxy={{proxy_env.http_proxy}}" state=present

- hosts: ossec_server
  remote_user: root

  tasks: 

   - name: Delete proxy if there is any
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="" state=present
   - name: set proxy
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="proxy={{proxy_env.http_proxy}}" state=present

- hosts: rsyslog_server
  remote_user: root

  tasks: 

   - name: Delete proxy if there is any
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="" state=present
   - name: set proxy
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="proxy={{proxy_env.http_proxy}}" state=present

- hosts: reverseproxy_server 
  remote_user: root

  tasks: 
   - name: Delete proxy if there is any
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="" state=present
   - name: set proxy
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="proxy={{proxy_env.http_proxy}}" state=present


- hosts: nagios_server 
  remote_user: root

  tasks: 
   - name: Delete proxy if there is any
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="" state=present
   - name: set proxy
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="proxy={{proxy_env.http_proxy}}" state=present


- hosts: ads_server 
  remote_user: root

  tasks: 
   - name: Delete proxy if there is any
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="" state=present
   - name: set proxy
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="proxy={{proxy_env.http_proxy}}" state=present


- hosts: rsnapshot_server
  remote_user: root

  tasks: 
   - name: Delete proxy if there is any
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="" state=present
   - name: set proxy
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="proxy={{proxy_env.http_proxy}}" state=present

- hosts: ansible_server
  remote_user: root

  tasks: 
   - name: Delete proxy if there is any
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="" state=present
   - name: set proxy
     lineinfile: path=/etc/yum.conf regexp="^proxy.*" line="proxy={{proxy_env.http_proxy}}" state=present



#+END_SRC

